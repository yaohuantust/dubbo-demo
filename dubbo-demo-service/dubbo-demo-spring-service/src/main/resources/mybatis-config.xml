<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!--属性(properties)-->
    <!--这些属性可以在外部进行配置，并可以进行动态替换-->
    <properties resource="jdbc.properties">
    </properties>


    <!--设置(settings)-->
    <!--这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为-->
    <settings>
        <!--全局性地开启或关闭所有映射器配置文件中已配置的任何缓存-->
        <setting name="cacheEnabled" value="false"/>
        <!--延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态-->
        <setting name="lazyLoadingEnabled" value="false"/>
        <!--是否允许单个语句返回多结果集（需要数据库驱动支持）-->
        <setting name="multipleResultSetsEnabled" value="false"/>
        <!--使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察-->
        <setting name="useColumnLabel" value="false"/>
        <!--允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）-->
        <setting name="useGeneratedKeys" value="false"/>
        <!--指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）-->
        <setting name="autoMappingBehavior" value="PARTIAL"/>
        <!--指定发现自动映射目标未知列（或未知属性类型）的行为。
        NONE: 不做任何反应
        WARNING: 输出警告日志（'org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN）
        FAILING: 映射失败 (抛出 SqlSessionException)-->
        <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>
        <!--配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新-->
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <!--设置超时时间，它决定数据库驱动等待数据库响应的秒数-->
        <setting name="defaultStatementTimeout" value="25"/>
        <!--为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖-->
        <setting name="defaultFetchSize" value="100"/>
        <!--是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false-->
        <setting name="safeRowBoundsEnabled" value="false"/>

        <!--是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn-->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!--MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存-->
        <setting name="localCacheScope" value="SESSION"/>
        <!--当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER-->
        <setting name="jdbcTypeForNull" value="OTHER"/>
        <!--指定对象的哪些方法触发一次延迟加载-->
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
    </settings>


    <!--类型别名（typeAliases）-->
    <!--类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写-->
    <typeAliases>
        <!--<typeAlias alias="user" type="entity.UserPO"/>-->
        <package name="com.tust.yh.spring.entity"/>
    </typeAliases>

    <!--环境配置（environments）-->
    <environments default="development">
        <environment id="development">
            <!--事务管理器（transactionManager）-->
            <transactionManager type="JDBC"/>
            <!--数据源（dataSource）-->
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.user}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>


    <!--映射器（mappers）-->
    <mappers>
        <!--<mapper resource="com.tust.yh.mapper/MenuMapper.xml"/>-->
        <!--必须在同一个包下，名称相同-->
        <mapper class="com.tust.yh.spring.mapper.MenuMapper"/>
    </mappers>
</configuration>